{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":36545,"sourceType":"datasetVersion","datasetId":1309},{"sourceId":533474,"sourceType":"datasetVersion","datasetId":30764},{"sourceId":8774173,"sourceType":"datasetVersion","datasetId":5273255}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/aftabjamali/bert-finetune-on-sarcasm-detection-dataset?scriptVersionId=185186188\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"\n#sarcasm_detection = pd.read_csv(\"/kaggle/input/sarcasm/train-balanced-sarcasm.csv\")\n# Separate data into two DataFrames based on labels\n#df_label_0 = sarcasm_detection[sarcasm_detection['label'] == 0].sample(n=10000, random_state=1)\n#df_label_1 = sarcasm_detection[sarcasm_detection['label'] == 1].sample(n=10000, random_state=1)\n\n# Concatenate the two DataFrames to get a balanced dataset\n#df = pd.concat([df_label_0, df_label_1], ignore_index=True)\n\n# Display the first few rows of the balanced dataset\n#df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:14.150758Z","iopub.execute_input":"2024-06-24T13:57:14.151809Z","iopub.status.idle":"2024-06-24T13:57:14.157039Z","shell.execute_reply.started":"2024-06-24T13:57:14.151756Z","shell.execute_reply":"2024-06-24T13:57:14.156216Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\ndf = pd.read_csv(\"/kaggle/input/d/aftabjamali/news-headlines-dataset-for-sarcasm-detection/sarcasm_detection.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:14.176296Z","iopub.execute_input":"2024-06-24T13:57:14.176556Z","iopub.status.idle":"2024-06-24T13:57:14.647835Z","shell.execute_reply.started":"2024-06-24T13:57:14.176534Z","shell.execute_reply":"2024-06-24T13:57:14.646788Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"                                        article_link  \\\n0  https://www.huffingtonpost.com/entry/versace-b...   \n1  https://www.huffingtonpost.com/entry/roseanne-...   \n2  https://local.theonion.com/mom-starting-to-fea...   \n3  https://politics.theonion.com/boehner-just-wan...   \n4  https://www.huffingtonpost.com/entry/jk-rowlin...   \n\n                                            headline  is_sarcastic  \n0  former versace store clerk sues over secret 'b...             0  \n1  the 'roseanne' revival catches up to our thorn...             0  \n2  mom starting to fear son's web series closest ...             1  \n3  boehner just wants wife to listen, not come up...             1  \n4  j.k. rowling wishes snape happy birthday in th...             0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>article_link</th>\n      <th>headline</th>\n      <th>is_sarcastic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>https://www.huffingtonpost.com/entry/versace-b...</td>\n      <td>former versace store clerk sues over secret 'b...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>https://www.huffingtonpost.com/entry/roseanne-...</td>\n      <td>the 'roseanne' revival catches up to our thorn...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>https://local.theonion.com/mom-starting-to-fea...</td>\n      <td>mom starting to fear son's web series closest ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>https://politics.theonion.com/boehner-just-wan...</td>\n      <td>boehner just wants wife to listen, not come up...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>https://www.huffingtonpost.com/entry/jk-rowlin...</td>\n      <td>j.k. rowling wishes snape happy birthday in th...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"len(df['headline'].values)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:14.649994Z","iopub.execute_input":"2024-06-24T13:57:14.650718Z","iopub.status.idle":"2024-06-24T13:57:14.65674Z","shell.execute_reply.started":"2024-06-24T13:57:14.65068Z","shell.execute_reply":"2024-06-24T13:57:14.655843Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"26709"},"metadata":{}}]},{"cell_type":"code","source":"import tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport re\nimport nltk \nfrom nltk import word_tokenize\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:14.657981Z","iopub.execute_input":"2024-06-24T13:57:14.658293Z","iopub.status.idle":"2024-06-24T13:57:18.555471Z","shell.execute_reply.started":"2024-06-24T13:57:14.658267Z","shell.execute_reply":"2024-06-24T13:57:18.554659Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-06-24 13:57:15.014768: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-06-24 13:57:15.014819: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-06-24 13:57:15.016315: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"def remove_emojis(text):\n    # Define a pattern to match emojis\n    emoji_pattern = re.compile(\n        \"[\"\n        \"\\U0001F600-\\U0001F64F\"  # emoticons\n        \"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n        \"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n        \"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n        \"\\U00002500-\\U00002BEF\"  # chinese characters\n        \"\\U00002702-\\U000027B0\"\n        \"\\U00002702-\\U000027B0\"\n        \"\\U000024C2-\\U0001F251\"\n        \"\\U0001f926-\\U0001f937\"\n        \"\\U00010000-\\U0010ffff\"\n        \"\\u2640-\\u2642\"\n        \"\\u2600-\\u2B55\"\n        \"\\u200d\"\n        \"\\u23cf\"\n        \"\\u23e9\"\n        \"\\u231a\"\n        \"\\ufe0f\"  # dingbats\n        \"\\u3030\"\n        \"]+\", flags=re.UNICODE)\n    \n    # Replace emojis with an empty string\n    text_without_emojis = emoji_pattern.sub(r'', text)\n\n    return text_without_emojis\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:18.557525Z","iopub.execute_input":"2024-06-24T13:57:18.558056Z","iopub.status.idle":"2024-06-24T13:57:18.563925Z","shell.execute_reply.started":"2024-06-24T13:57:18.558029Z","shell.execute_reply":"2024-06-24T13:57:18.562961Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"def remove_emails_hashtags_mentions(text):\n    # Regular expression pattern to match emails, hashtags, and mentions\n    pattern = re.compile(\n        r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})|'  # Matches email addresses\n        r'(#\\w+)|'                                            # Matches hashtags\n        r'(@\\w+)'                                             # Matches mentions\n    )\n    \n    # Replace matched patterns with an empty string\n    text_without_emails_hashtags_mentions = pattern.sub('', text)\n\n    return text_without_emails_hashtags_mentions\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:18.56492Z","iopub.execute_input":"2024-06-24T13:57:18.565228Z","iopub.status.idle":"2024-06-24T13:57:18.578928Z","shell.execute_reply.started":"2024-06-24T13:57:18.565204Z","shell.execute_reply":"2024-06-24T13:57:18.578117Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"def preprocess_text(text):\n    text = str(text)\n    # Remove emails, hashtags, and mentions\n    text = remove_emails_hashtags_mentions(text)\n    \n    # Remove emojis\n    text = remove_emojis(text)\n    \n    # Replace non-alphabet characters with spaces and convert to lowercase\n    text = re.sub('[^a-zA-Z]', ' ', text).lower()\n    \n    # Remove extra whitespace\n    text = re.sub(r'\\s+', ' ', text).strip()\n    \n    return text","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:18.579983Z","iopub.execute_input":"2024-06-24T13:57:18.580302Z","iopub.status.idle":"2024-06-24T13:57:18.588715Z","shell.execute_reply.started":"2024-06-24T13:57:18.580278Z","shell.execute_reply":"2024-06-24T13:57:18.587964Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"print(preprocess_text(df['headline'][0]))","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:18.589712Z","iopub.execute_input":"2024-06-24T13:57:18.589991Z","iopub.status.idle":"2024-06-24T13:57:18.605036Z","shell.execute_reply.started":"2024-06-24T13:57:18.589967Z","shell.execute_reply":"2024-06-24T13:57:18.604117Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"former versace store clerk sues over secret black code for minority shoppers\n","output_type":"stream"}]},{"cell_type":"code","source":"df['cleaned_headlines'] = df['headline'].apply(lambda x: preprocess_text(x))","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:18.606199Z","iopub.execute_input":"2024-06-24T13:57:18.60666Z","iopub.status.idle":"2024-06-24T13:57:19.499332Z","shell.execute_reply.started":"2024-06-24T13:57:18.606627Z","shell.execute_reply":"2024-06-24T13:57:19.498458Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.500438Z","iopub.execute_input":"2024-06-24T13:57:19.500736Z","iopub.status.idle":"2024-06-24T13:57:19.506492Z","shell.execute_reply.started":"2024-06-24T13:57:19.500711Z","shell.execute_reply":"2024-06-24T13:57:19.505627Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"(26709, 4)"},"metadata":{}}]},{"cell_type":"code","source":"df['is_sarcastic'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.511147Z","iopub.execute_input":"2024-06-24T13:57:19.511431Z","iopub.status.idle":"2024-06-24T13:57:19.52025Z","shell.execute_reply.started":"2024-06-24T13:57:19.511408Z","shell.execute_reply":"2024-06-24T13:57:19.519307Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"is_sarcastic\n0    14985\n1    11724\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from imblearn.over_sampling import RandomOverSampler\n\ndef balance_df(df, text, target):\n    ros = RandomOverSampler()\n    train_x, train_y = ros.fit_resample(np.array(df[text]).reshape(-1,1), np.array(df[target]).reshape(-1,1))\n    new_df = pd.DataFrame(list(zip([x[0] for x in train_x], train_y)), columns = [text, target])\n    \n    return new_df\n\n\nsarcasm_df = pd.DataFrame()\nsarcasm_df = balance_df(df, 'cleaned_headlines', 'is_sarcastic')","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.521363Z","iopub.execute_input":"2024-06-24T13:57:19.521621Z","iopub.status.idle":"2024-06-24T13:57:19.916554Z","shell.execute_reply.started":"2024-06-24T13:57:19.521598Z","shell.execute_reply":"2024-06-24T13:57:19.915742Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"sarcasm_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.917825Z","iopub.execute_input":"2024-06-24T13:57:19.918599Z","iopub.status.idle":"2024-06-24T13:57:19.928185Z","shell.execute_reply.started":"2024-06-24T13:57:19.918561Z","shell.execute_reply":"2024-06-24T13:57:19.927097Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"                                   cleaned_headlines  is_sarcastic\n0  former versace store clerk sues over secret bl...             0\n1  the roseanne revival catches up to our thorny ...             0\n2  mom starting to fear son s web series closest ...             1\n3  boehner just wants wife to listen not come up ...             1\n4  j k rowling wishes snape happy birthday in the...             0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cleaned_headlines</th>\n      <th>is_sarcastic</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>former versace store clerk sues over secret bl...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>the roseanne revival catches up to our thorny ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>mom starting to fear son s web series closest ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>boehner just wants wife to listen not come up ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>j k rowling wishes snape happy birthday in the...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"sarcasm_df['is_sarcastic'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.929518Z","iopub.execute_input":"2024-06-24T13:57:19.930077Z","iopub.status.idle":"2024-06-24T13:57:19.940493Z","shell.execute_reply.started":"2024-06-24T13:57:19.930036Z","shell.execute_reply":"2024-06-24T13:57:19.939695Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"is_sarcastic\n0    14985\n1    14985\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"X = sarcasm_df[\"cleaned_headlines\"]\ny = sarcasm_df['is_sarcastic']\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.941492Z","iopub.execute_input":"2024-06-24T13:57:19.941768Z","iopub.status.idle":"2024-06-24T13:57:19.952494Z","shell.execute_reply.started":"2024-06-24T13:57:19.941745Z","shell.execute_reply":"2024-06-24T13:57:19.951763Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.953475Z","iopub.execute_input":"2024-06-24T13:57:19.953759Z","iopub.status.idle":"2024-06-24T13:57:19.961795Z","shell.execute_reply.started":"2024-06-24T13:57:19.953734Z","shell.execute_reply":"2024-06-24T13:57:19.960976Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"((23976,), (5994,), (23976,), (5994,))"},"metadata":{}}]},{"cell_type":"code","source":"from transformers import RobertaTokenizer, TFRobertaForSequenceClassification\n\n# Load tokenizer and model\ntokenizer = RobertaTokenizer.from_pretrained('roberta-base')\nmodel = TFRobertaForSequenceClassification.from_pretrained('roberta-base')","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:19.962955Z","iopub.execute_input":"2024-06-24T13:57:19.963616Z","iopub.status.idle":"2024-06-24T13:57:25.257832Z","shell.execute_reply.started":"2024-06-24T13:57:19.96356Z","shell.execute_reply":"2024-06-24T13:57:25.257107Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"Some weights of the PyTorch model were not used when initializing the TF 2.0 model TFRobertaForSequenceClassification: ['roberta.embeddings.position_ids']\n- This IS expected if you are initializing TFRobertaForSequenceClassification from a PyTorch model trained on another task or with another architecture (e.g. initializing a TFBertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing TFRobertaForSequenceClassification from a PyTorch model that you expect to be exactly identical (e.g. initializing a TFBertForSequenceClassification model from a BertForSequenceClassification model).\nSome weights or buffers of the TF 2.0 model TFRobertaForSequenceClassification were not initialized from the PyTorch model and are newly initialized: ['classifier.dense.weight', 'classifier.dense.bias', 'classifier.out_proj.weight', 'classifier.out_proj.bias']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}]},{"cell_type":"code","source":"max_length = max(len(text) for text in df['cleaned_headlines'])\nmax_length","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:25.258953Z","iopub.execute_input":"2024-06-24T13:57:25.259272Z","iopub.status.idle":"2024-06-24T13:57:25.271005Z","shell.execute_reply.started":"2024-06-24T13:57:25.259244Z","shell.execute_reply":"2024-06-24T13:57:25.270016Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"239"},"metadata":{}}]},{"cell_type":"code","source":"train_encodings = tokenizer(X_train.tolist(), padding=True, truncation=True, max_length=max_length)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:25.272122Z","iopub.execute_input":"2024-06-24T13:57:25.272408Z","iopub.status.idle":"2024-06-24T13:57:30.422403Z","shell.execute_reply.started":"2024-06-24T13:57:25.272373Z","shell.execute_reply":"2024-06-24T13:57:30.42153Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"test_encodings = tokenizer(X_test.tolist(), padding=True, truncation=True, max_length=max_length)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:30.423514Z","iopub.execute_input":"2024-06-24T13:57:30.423811Z","iopub.status.idle":"2024-06-24T13:57:31.4606Z","shell.execute_reply.started":"2024-06-24T13:57:30.423786Z","shell.execute_reply":"2024-06-24T13:57:31.459784Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"train_dataset = tf.data.Dataset.from_tensor_slices((dict(train_encodings), y_train))\ntest_dataset = tf.data.Dataset.from_tensor_slices((dict(test_encodings), y_test))","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:31.461655Z","iopub.execute_input":"2024-06-24T13:57:31.461926Z","iopub.status.idle":"2024-06-24T13:57:40.61723Z","shell.execute_reply.started":"2024-06-24T13:57:31.461903Z","shell.execute_reply":"2024-06-24T13:57:40.616222Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"optimizer = tf.keras.optimizers.Adam(learning_rate=5e-5)\nloss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n\nmodel.compile(optimizer=optimizer, loss=loss, metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:40.618586Z","iopub.execute_input":"2024-06-24T13:57:40.61888Z","iopub.status.idle":"2024-06-24T13:57:40.65661Z","shell.execute_reply.started":"2024-06-24T13:57:40.618854Z","shell.execute_reply":"2024-06-24T13:57:40.655724Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"history = model.fit(\n    train_dataset.shuffle(1000).batch(16),\n    epochs=5,\n    batch_size=8,\n    validation_data=test_dataset.batch(16)\n)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T13:57:40.658136Z","iopub.execute_input":"2024-06-24T13:57:40.658508Z","iopub.status.idle":"2024-06-24T14:17:49.350837Z","shell.execute_reply.started":"2024-06-24T13:57:40.658476Z","shell.execute_reply":"2024-06-24T14:17:49.349826Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Epoch 1/5\nWARNING: AutoGraph could not transform <function infer_framework at 0x780930b04e50> and will run it as-is.\nCause: for/else statement not yet supported\nTo silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1719237539.604678    8041 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"1499/1499 [==============================] - 331s 159ms/step - loss: 0.3206 - accuracy: 0.8633 - val_loss: 0.2374 - val_accuracy: 0.9101\nEpoch 2/5\n1499/1499 [==============================] - 219s 146ms/step - loss: 0.1906 - accuracy: 0.9266 - val_loss: 0.2056 - val_accuracy: 0.9213\nEpoch 3/5\n1499/1499 [==============================] - 220s 146ms/step - loss: 0.1254 - accuracy: 0.9557 - val_loss: 0.2518 - val_accuracy: 0.9208\nEpoch 4/5\n1499/1499 [==============================] - 220s 147ms/step - loss: 0.1010 - accuracy: 0.9641 - val_loss: 0.2620 - val_accuracy: 0.9274\nEpoch 5/5\n1499/1499 [==============================] - 219s 146ms/step - loss: 0.1076 - accuracy: 0.9645 - val_loss: 0.2644 - val_accuracy: 0.9241\n","output_type":"stream"}]},{"cell_type":"code","source":"y_probs = model.predict(test_dataset.batch(16))\ny_pred = np.argmax(y_probs.logits, axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:17:49.352184Z","iopub.execute_input":"2024-06-24T14:17:49.352498Z","iopub.status.idle":"2024-06-24T14:18:13.77261Z","shell.execute_reply.started":"2024-06-24T14:17:49.35247Z","shell.execute_reply":"2024-06-24T14:18:13.771665Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"375/375 [==============================] - 24s 38ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:18:13.773891Z","iopub.execute_input":"2024-06-24T14:18:13.774244Z","iopub.status.idle":"2024-06-24T14:18:13.779019Z","shell.execute_reply.started":"2024-06-24T14:18:13.774215Z","shell.execute_reply":"2024-06-24T14:18:13.778043Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"# Assuming history contains the training and validation loss\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.title(\"Train and Validation Loss\")\nplt.legend()  # This will show the legend based on the labels specified above\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:25:50.063118Z","iopub.execute_input":"2024-06-24T14:25:50.063831Z","iopub.status.idle":"2024-06-24T14:25:50.3621Z","shell.execute_reply.started":"2024-06-24T14:25:50.063797Z","shell.execute_reply":"2024-06-24T14:25:50.361095Z"},"trusted":true},"execution_count":32,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"cm = confusion_matrix(y_test, y_pred)\n\nplt.figure(figsize=(8,6))\nplt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\nplt.title(\"Confusion Matrix\")\nplt.colorbar()\ntick_marks = np.arange(2)\nplt.xticks(tick_marks, ['Nor Sarcastic', 'Sarcastic'])\nplt.yticks(tick_marks, ['Nor Sarcastic', 'Sarcastic'])\n\nthresh = cm.max() / 2.\nfor i in range(cm.shape[0]):\n    for j in range(cm.shape[1]):\n        plt.text(j, i, str(cm[i, j]), ha='center', va='center', color='black')\n\nplt.xlabel(\"predicted Label\")\nplt.ylabel(\"True Label\")\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:18:14.091472Z","iopub.execute_input":"2024-06-24T14:18:14.091765Z","iopub.status.idle":"2024-06-24T14:18:14.405654Z","shell.execute_reply.started":"2024-06-24T14:18:14.09174Z","shell.execute_reply":"2024-06-24T14:18:14.404711Z"},"trusted":true},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"accuracy = classification_report(y_test, y_pred)\nprint(accuracy)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:18:14.406789Z","iopub.execute_input":"2024-06-24T14:18:14.407051Z","iopub.status.idle":"2024-06-24T14:18:14.422117Z","shell.execute_reply.started":"2024-06-24T14:18:14.407027Z","shell.execute_reply":"2024-06-24T14:18:14.421173Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.91      0.94      0.93      2975\n           1       0.94      0.90      0.92      3019\n\n    accuracy                           0.92      5994\n   macro avg       0.92      0.92      0.92      5994\nweighted avg       0.92      0.92      0.92      5994\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Save Model","metadata":{}},{"cell_type":"code","source":"model.save_pretrained(\"my_distil_bert_sarcasm_detection\")\ntokenizer.save_pretrained(\"my_distil_bert_sarcasm_detection_tokenizer\")","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:18:14.426247Z","iopub.execute_input":"2024-06-24T14:18:14.426572Z","iopub.status.idle":"2024-06-24T14:18:16.386504Z","shell.execute_reply.started":"2024-06-24T14:18:14.426546Z","shell.execute_reply":"2024-06-24T14:18:16.38547Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"('my_distil_bert_sarcasm_detection_tokenizer/tokenizer_config.json',\n 'my_distil_bert_sarcasm_detection_tokenizer/special_tokens_map.json',\n 'my_distil_bert_sarcasm_detection_tokenizer/vocab.json',\n 'my_distil_bert_sarcasm_detection_tokenizer/merges.txt',\n 'my_distil_bert_sarcasm_detection_tokenizer/added_tokens.json')"},"metadata":{}}]},{"cell_type":"code","source":"import os \nos.chdir(r'/kaggle/working')","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:54:32.494213Z","iopub.execute_input":"2024-06-24T14:54:32.494584Z","iopub.status.idle":"2024-06-24T14:54:32.499326Z","shell.execute_reply.started":"2024-06-24T14:54:32.494557Z","shell.execute_reply":"2024-06-24T14:54:32.498259Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"from IPython.display import FileLink \nFileLink(r'/kaggle/working/my_distil_bert_sarcasm_detection/tf_model.h5')","metadata":{"execution":{"iopub.status.busy":"2024-06-24T14:55:33.990568Z","iopub.execute_input":"2024-06-24T14:55:33.99132Z","iopub.status.idle":"2024-06-24T14:55:33.997094Z","shell.execute_reply.started":"2024-06-24T14:55:33.991287Z","shell.execute_reply":"2024-06-24T14:55:33.996183Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"/kaggle/working/my_distil_bert_sarcasm_detection/tf_model.h5","text/html":"<a href='/kaggle/working/my_distil_bert_sarcasm_detection/tf_model.h5' target='_blank'>/kaggle/working/my_distil_bert_sarcasm_detection/tf_model.h5</a><br>"},"metadata":{}}]},{"cell_type":"markdown","source":"<a href=\"/kaggle/working/my_distil_bert_sarcasm_detection/tf_model.h5\"> Download File </a>","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}